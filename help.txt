// client/src/components/UserProgress.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const UserProgress = ({ userId, courseId }) => {
    const [progress, setProgress] = useState(0);

    useEffect(() => {
        const fetchProgress = async () => {
            const response = await axios.post('/api/progress/get', { user_id: userId, course_id: courseId });
            setProgress(response.data.progress);
        };
        fetchProgress();
    }, [userId, courseId]);

    const handleUpdate = async (newProgress) => {
        const response = await axios.put('/api/progress/update', { user_id: userId, course_id: courseId, progress: newProgress });
        setProgress(response.data.progress);
    };

    return (
        <div>
            <h3>Progress: {progress}%</h3>
            <button onClick={() => handleUpdate(progress + 10)}>Increase Progress</button>
        </div>
    );
};

export default UserProgress;

// client/src/components/AddCourse.js
import React, { useState } from 'react';
import axios from 'axios';

const AddCourse = () => {
    const [formData, setFormData] = useState({ title: '', description: '', content: '' });

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        await axios.post('/api/courses', formData);
    };

    return (
        <form onSubmit={handleSubmit}>
            <input name="title" onChange={handleChange} value={formData.title} placeholder="Title" />
            <textarea name="description" onChange={handleChange} value={formData.description} placeholder="Description" />
            <textarea name="content" onChange={handleChange} value={formData.content} placeholder="Content" />
            <button type="submit">Add Course</button>
        </form>
    );
};

export default AddCourse;
// client/src/components/CourseList.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const CourseList = () => {
    const [courses, setCourses] = useState([]);

    useEffect(() => {
        const fetchCourses = async () => {
            const response = await axios.get('/api/courses');
            setCourses(response.data);
        };
        fetchCourses();
    }, []);

    return (
        <div>
            {courses.map(course => (
                <div key={course.id}>
                    <h3>{course.title}</h3>
                    <p>{course.description}</p>
                    <p>{course.content}</p>
                </div>
            ))}
        </div>
    );
};

export default CourseList;
// server/routes/progressRoutes.js
const express = require('express');
const { getProgress, updateProgress } = require('../controllers/progressController');
const router = express.Router();

router.post('/get', getProgress);
router.put('/update', updateProgress);

module.exports = router;
// server/controllers/progressController.js
const pool = require('../db');

exports.getProgress = async (req, res) => {
    const { user_id, course_id } = req.body;
    const result = await pool.query(
        'SELECT * FROM progress WHERE user_id = $1 AND course_id = $2',
        [user_id, course_id]
    );
    res.json(result.rows[0]);
};

exports.updateProgress = async (req, res) => {
    const { user_id, course_id, progress } = req.body;
    const result = await pool.query(
        'UPDATE progress SET progress = $1 WHERE user_id = $2 AND course_id = $3 RETURNING *',
        [progress, user_id, course_id]
    );
    res.json(result.rows[0]);
};
// server/controllers/courseController.js
const pool = require('../db');

exports.getCourses = async (req, res) => {
    const result = await pool.query('SELECT * FROM courses');
    res.json(result.rows);
};

exports.addCourse = async (req, res) => {
    const { title, description, content } = req.body;
    const result = await pool.query(
        'INSERT INTO courses (title, description, content) VALUES ($1, $2, $3) RETURNING *',
        [title, description, content]
    );
    res.json(result.rows[0]);
};

exports.updateCourse = async (req, res) => {
    const { id, title, description, content } = req.body;
    const result = await pool.query(
        'UPDATE courses SET title = $1, description = $2, content = $3 WHERE id = $4 RETURNING *',
        [title, description, content, id]
    );
    res.json(result.rows[0]);
};

exports.deleteCourse = async (req, res) => {
    const { id } = req.params;
    await pool.query('DELETE FROM courses WHERE id = $1', [id]);
    res.json({ message: 'Course deleted' });
};
import React, { useState, useContext } from "react";
import axios from "axios";
import { useFormik } from "formik";
import * as Yup from "yup";
import { Link, useNavigate } from "react-router-dom";
import { api_secret } from "../utility/config";
import { CourseContext } from "./CourseContext";
import "./dash.css";

const CourseDash = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  const { courseData, setCourseData } = useContext(CourseContext);
  const navigate = useNavigate();
  const cloudName = "ddsgll0wa";
  const preset = "beulah";

  const handleUpload = async () => {
    if (!courseData.image) return;

    const payload = new FormData();
    payload.append("file", courseData.image);
    payload.append("upload_preset", preset);

    try {
      const response = await axios.post(
        `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`,
        payload
      );
      setCourseData((prevData) => ({
        ...prevData,
        imageurl: response.data.secure_url,
      }));
    } catch (error) {
      console.log(error);
    }
  };

  const handleSubmit = async (formValues) => {
    if (!courseData.imageurl) {
      setError("Please upload an image first.");
      return;
    }

    try {
      setLoading(true);
      setError(false);
      const response = await fetch(`${api_secret}/api/courses/add`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          ...formValues,
          avatarurl: courseData.imageurl,
        }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        setError(errorData);
        return;
      }

      const data = await response.json();
      if (data.success) {
        navigate("/course");
      } else {
        setError(data.error);
      }
    } catch (e) {
      setError(e.message);
    } finally {
      setLoading(false);
    }
  };

  const formik = useFormik({
    initialValues: {
      title: "",
      description: "",
    },
    validationSchema: Yup.object({
      title: Yup.string().required("Required"),
      description: Yup.string().required("Required"),
    }),
    onSubmit: (values) => {
      setCourseData((prevData) => ({
        ...prevData,
        title: values.title,
        description: values.description,
      }));
      handleSubmit(values);
    },
  });

  return (
    <section className="wrap">
      <div className="main">
        <div className="head">
          <h1>Add Course</h1>
        </div>
        <hr />
        <hr />
        <form onSubmit={formik.handleSubmit}>
          <div className="mult">
            <div className="lab">
              <button className="btn" onClick={handleUpload} type="button">
                Upload Image
              </button>

              <input
                name="image"
                type="file"
                id="image"
                onChange={(e) =>
                  setCourseData((prevData) => ({
                    ...prevData,
                    image: e.target.files[0],
                  }))
                }
              />
            </div>
            <div className="lab">
              <label htmlFor="title">Title</label>
              <input
                id="title"
                type="text"
                {...formik.getFieldProps("title")}
              />
              {formik.touched.title && formik.errors.title ? (
                <div>{formik.errors.title}</div>
              ) : null}
            </div>
          </div>

          <div className="lab">
            <label htmlFor="description">Description</label>
            <textarea
              id="description"
              {...formik.getFieldProps("description")}
            />
            {formik.touched.description && formik.errors.description ? (
              <div>{formik.errors.description}</div>
            ) : null}
          </div>

          <button type="submit" disabled={loading}>
            {loading ? "Please wait..." : "Add Course"}
          </button>
          <div className="log-form">
            <p>
              Would you like to explore our courses?
              <Link to="/course">Explore here</Link>
            </p>
            <p>{error && error}</p>
          </div>
        </form>
        <hr />
        <hr />

        {courseData.imageurl && (
          <div className="course-display">
            <h2>{courseData.title}</h2>
            <p>{courseData.description}</p>
            <img src={courseData.imageurl} alt="Course" id="img" />
          </div>
        )}
      </div>
    </section>
  );
};

export default CourseDash;



Setting up table relations in Prisma involves defining relationships between your models/entities using Prisma schema. Once you have your relations defined, you can use these relations to enforce constraints and fetch related data easily. Hereâ€™s a step-by-step guide on how to do this, along with setting up protected routes in your application:

### Setting Table Relations in Prisma

1. **Define Models in Prisma Schema**:
   Assume you have two models, `User` and `Post`, where each user can have multiple posts:

   ```prisma
   // schema.prisma
   model User {
     id        Int      @id @default(autoincrement())
     username  String
     posts     Post[]
   }

   model Post {
     id        Int      @id @default(autoincrement())
     title     String
     content   String
     user      User     @relation(fields: [userId], references: [id])
     userId    Int
   }
   ```

   - In this schema:
     - `User` has a one-to-many relationship with `Post` (one user can have multiple posts).
     - `Post` has a many-to-one relationship with `User` (each post belongs to one user).

2. **Generate Prisma Client**:
   After defining your schema, generate Prisma client to use in your application. Run `npx prisma generate` to generate the client.

3. **Use Relations in Your Application**:
   Now you can use these relations in your application code. For example, to create a new post for a user:

   ```javascript
   const newPost = await prisma.post.create({
     data: {
       title: "New Post",
       content: "This is the content of the post.",
       user: {
         connect: { id: userId } // userId is the id of the user you want to associate the post with
       }
     }
   });
   ```

   You can also fetch related data easily:

   ```javascript
   const userWithPosts = await prisma.user.findUnique({
     where: { id: userId },
     include: {
       posts: true
     }
   });
   ```

### Protected Routes

To protect routes in your application, especially based on user authentication and authorization, you typically follow these steps:

1. **Authentication**:
   Implement user authentication using a library like Passport.js, JWT (JSON Web Tokens), or a session-based approach. Prisma itself doesn't handle authentication directly but integrates with various frameworks and libraries that do.

2. **Authorization**:
   Once a user is authenticated, implement authorization to restrict access to certain routes or actions based on the userâ€™s roles or permissions. This can be done manually or using a library like `casl` or `express-jwt`.

3. **Example with Express.js**:
   Hereâ€™s a basic example of protecting routes using JWT authentication with Express.js:

   ```javascript
   const jwt = require('jsonwebtoken');
   const express = require('express');
   const app = express();

   // Middleware to verify JWT token
   function authenticateToken(req, res, next) {
     const authHeader = req.headers['authorization'];
     const token = authHeader && authHeader.split(' ')[1];

     if (token == null) return res.sendStatus(401);

     jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
       if (err) return res.sendStatus(403);
       req.user = user;
       next();
     });
   }

   // Protected route
   app.get('/protected-route', authenticateToken, (req, res) => {
     // Authorized logic here
     res.json({ message: 'This is a protected route!' });
   });

   app.listen(3000, () => console.log('Server running on port 3000'));
   ```

   - In this example, `authenticateToken` middleware checks for a valid JWT token in the `Authorization` header.
   - If the token is valid, `req.user` will contain the decoded user information, and the request will proceed to the protected route handler.

### Conclusion

By defining table relations in Prisma and implementing protected routes in your application, you can create a robust backend that manages data relationships effectively and secures access to sensitive endpoints based on user authentication and authorization.

To implement protected routes in your React application using React Router, you'll typically want to control access based on whether a user is authenticated or authorized. Hereâ€™s a basic approach to achieve this:

### Steps to Implement Protected Routes

1. **Set Up Authentication Context**:
   First, you need to manage user authentication state globally using React Context or Redux. For simplicity, let's use React Context in this example.

   ```jsx
   // AuthContext.js
   import React, { createContext, useState } from 'react';

   export const AuthContext = createContext();

   const AuthProvider = ({ children }) => {
     const [isLoggedIn, setIsLoggedIn] = useState(false);

     const login = () => setIsLoggedIn(true);
     const logout = () => setIsLoggedIn(false);

     return (
       <AuthContext.Provider value={{ isLoggedIn, login, logout }}>
         {children}
       </AuthContext.Provider>
     );
   };

   export default AuthProvider;
   ```

   Wrap your `App` component with `AuthProvider` in `index.js` or `App.js`:

   ```jsx
   // index.js or App.js
   import React from 'react';
   import ReactDOM from 'react-dom';
   import { BrowserRouter as Router } from 'react-router-dom';
   import App from './App';
   import AuthProvider from './AuthContext';

   ReactDOM.render(
     <Router>
       <AuthProvider>
         <App />
       </AuthProvider>
     </Router>,
     document.getElementById('root')
   );
   ```

2. **Create PrivateRoute Component**:
   Implement a custom `PrivateRoute` component that checks if the user is authenticated. If not, redirect them to the login page.

   ```jsx
   // PrivateRoute.jsx
   import React, { useContext } from 'react';
   import { Route, Navigate } from 'react-router-dom';
   import { AuthContext } from './AuthContext';

   const PrivateRoute = ({ element, ...rest }) => {
     const { isLoggedIn } = useContext(AuthContext);

     return (
       <Route
         {...rest}
         element={isLoggedIn ? element : <Navigate to="/login" replace />}
       />
     );
   };

   export default PrivateRoute;
   ```

3. **Update App.js to Use PrivateRoute**:
   Replace the standard `Route` components with `PrivateRoute` where authentication is required.

   ```jsx
   import React from 'react';
   import { Routes } from 'react-router-dom';
   import Nav from './pages/component/navigation/Nav';
   import Home from './pages/homepage/Home';
   import Profile from './pages/profile/Profile';
   import Register from './pages/register/Register';
   import Login from './pages/login/Login';
   import Courses from './pages/courses/Courses';
   import Footer from './pages/component/footer/Footer';
   import Dashboard from './dashboard/Dashboard';
   import Course from './pages/courses/Course';
   import PrivateRoute from './PrivateRoute';

   const App = () => {
     return (
       <>
         <Nav />
         <Routes>
           <PrivateRoute path="/profile" element={<Profile />} />
           <PrivateRoute path="/home" element={<Home />} />
           <PrivateRoute path="/courses" element={<Courses />} />
           <PrivateRoute path="/course" element={<Course />} />
           <Route path="/login" element={<Login />} />
           <Route path="/" element={<Register />} />
           <PrivateRoute path="/dashboard" element={<Dashboard />} />
         </Routes>
         <Footer />
       </>
     );
   };

   export default App;
   ```

### Explanation:

- **AuthContext**: Manages the authentication state (`isLoggedIn`) and provides methods (`login`, `logout`) to update the state.
- **PrivateRoute**: A custom component that wraps around `Route` and checks if the user is authenticated (`isLoggedIn`). If yes, it renders the component passed via the `element` prop; otherwise, it redirects the user to the login page (`Navigate to="/login"`).

### Usage:

- Routes like `/profile`, `/home`, `/courses`, `/course`, and `/dashboard` are protected and require authentication.
- `/login` and `/register` are public routes accessible to everyone.

By following this approach, you ensure that only authenticated users can access certain pages/routes in your React application, while unauthorized users are redirected to the login page. Adjust the `PrivateRoute` component and `AuthContext` as per your specific authentication logic and requirements.